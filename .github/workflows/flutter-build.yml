name: Flutter Android Build

on:
  push:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      FLUTTER_VERSION: '3.29.3'
      NDK_VERSION: '27.0.12077973'
      SDK_ROOT: $HOME/Android/Sdk

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}

      # ────────────────────────────────────────────────────────────────
      # 1) CACHE & (if miss) INSTALL cmdline-tools + NDK
      # ────────────────────────────────────────────────────────────────
      - name: Run flutter doctor to initialize Flutter
        run: flutter doctor
        
      - name: Restore NDK cache
        id: ndk-cache
        uses: actions/cache@v3
        with:
          path: ${{ env.SDK_ROOT }}/ndk/${{ env.NDK_VERSION }}
          key: ${{ runner.os }}-android-ndk-${{ env.NDK_VERSION }}

      - name: Bootstrap cmdline-tools & install NDK (cache miss)
        if: steps.ndk-cache.outputs.cache-hit != 'true'
        run: |
          set -e
          
          # Base env vars (use export if in script)
          SDK_ROOT="${HOME}/Android/Sdk"
          NDK_VERSION="27.0.12077973"
          
          # Make sure base dir exists
          mkdir -p "$SDK_ROOT/cmdline-tools"

          # Download cmdline tools
          curl -sSL https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip -o cmdline-tools.zip
          
          # Extract to a temporary directory
          unzip -q cmdline-tools.zip -d cmdline-tools-temp
          rm cmdline-tools.zip

          # Create proper nested structure: latest/cmdline-tools/*
          mkdir -p "$SDK_ROOT/cmdline-tools/latest/cmdline-tools"
          mv cmdline-tools-temp/cmdline-tools/* "$SDK_ROOT/cmdline-tools/latest/cmdline-tools/"
          rm -rf cmdline-tools-temp

          # Add tools to PATH
          export PATH="$SDK_ROOT/cmdline-tools/latest/cmdline-tools/bin:$PATH"

          # Install NDK
          yes | sdkmanager --sdk_root="${SDK_ROOT}" "ndk;${NDK_VERSION}"

        env:
          SDK_ROOT: $HOME/Android/Sdk
          NDK_VERSION: 27.0.12077973
          
      - name: Ensure correct SDK for dependencies
        run: |
          if grep -r "flutter_test" pubspec.yaml; then
            flutter pub get
          else
            dart pub get
          fi

      - name: Patch Gradle to force NDK
        run: |
          sed -i '/android {/a \        ndkVersion = "27.0.12077973"' \
            android/app/build.gradle    

      # ────────────────────────────────────────────────────────────────
      # 2) BUILD THE APK
      # ────────────────────────────────────────────────────────────────
      - name: Build release APK
        env:
          ANDROID_NDK_HOME: ${{ env.SDK_ROOT }}/ndk/${{ env.NDK_VERSION }}
          ANDROID_NDK_ROOT: ${{ env.SDK_ROOT }}/ndk/${{ env.NDK_VERSION }}
        run: flutter build apk --release

      - name: Create output directory
        run: mkdir -p build/app/github_workflow/release/

      - name: Move APK
        run: cp build/app/outputs/flutter-apk/app-release.apk build/app/github_workflow/release/

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: flutter-release-apk
          path: build/app/github_workflow/release/app-release.apk
